@page "/calc"
@rendermode InteractiveServer
@inject IJSRuntime JS

<PageTitle>Calculator</PageTitle>

<h1>Calculator</h1>

<button class="btn btn-primary" @onclick="onclickcalculator">Fetch calculator operation</button>

<p role="status"><em>Current operation:</em></p>
<p>@operation_response</p>

@code {

	public class OperationRequest
	{
		public int request_id { get; set; }
		public string operation_id { get; set; }
		public int[] values { get; set; }
	}

	private string operation_response = "NA";
	private int request_id = 0;

	private static HttpClient sharedClient = new()
	{
		//BaseAddress = new Uri("http://13.236.88.18/calcserve/"),
		BaseAddress = new Uri("http://localhost:5086/"),
	};

	public async Task onclickcalculator()
	{
		request_id++;

		Random random = new Random();
		string[] operations = ["add","subtract","multiply","divide"];

		//what are we requesting from the api?
		OperationRequest request_obj = new OperationRequest {
			request_id = request_id,
			operation_id = operations[random.Next(0,4)],
			values = [random.Next(1, 9), random.Next(1, 9)]
		};
		//var json = "{\"request_id\":" + request_id + "}";
		var json = System.Text.Json.JsonSerializer.Serialize(request_obj);
		var request_content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		await JS.InvokeVoidAsync("console.log", "request: " + json);

		HttpResponseMessage response = await sharedClient.PostAsync(sharedClient.BaseAddress + "calculator/", request_content);

		if (response.IsSuccessStatusCode)
		{
			string body = await response.Content.ReadAsStringAsync();
			await JS.InvokeVoidAsync("console.log", "response: " + body);
			operation_response = body;

			//force blazor to re-render the client so it doesnt lag behind in responses
			StateHasChanged();
		}
		else
		{
			await JS.InvokeVoidAsync("console.error", response);
		}
	}
}
