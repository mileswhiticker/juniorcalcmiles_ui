@page "/calc"
@rendermode InteractiveServer
@inject IJSRuntime JS
@using System.Xml.Serialization;

<PageTitle>Calculator</PageTitle>

<h1>Calculator</h1>

<input type="checkbox" @bind="isXml"> Use XML instead of JSON?
<br />
<br />

<button class="btn btn-primary" @onclick="onclickrandom">Fetch random calculator operation</button>
<br />
<br />
<p><em>Random result:</em> @response_random</p>
<input class="text" @bind="inputEquation" placeholder="Enter equation here">
<button class="btn btn-primary" @onclick="onclickresponse">Fetch answer</button>
<p><em>Answer:</em> @response_user</p>

@code {

	private string response_random = "";
	private string response_user = "";
	private int request_id = 0;
	private string inputEquation = "";
	private Random random = new Random();
	private bool isXml = false;

	public class OperationRequest
	{
		public int request_id { get; set; }
		public Operation rootOperation { get; set; }
	}

	public class Operation
	{
		public string operation_id { get; set; }
		public float[] values { get; set; }
		public Operation[] children { get; set; }
	}

	private static HttpClient sharedClient = new()
	{
		//BaseAddress = new Uri("http://13.236.88.18/calcserve/"),
		BaseAddress = new Uri("http://localhost:5086/"),
	};

	public async Task onclickresponse()
	{
		if (inputEquation != "")
		{
			await JS.InvokeVoidAsync("console.log", "inputEquation: " + inputEquation);
		}

		//loop over the characters and parse them all
		string outstring = "";
		string curNum = "";
		bool error = false;
		string unknownChar = "";
		for (int i = 0; i < inputEquation.Length;i++)
		{
			// outstring += inputEquation[i] + " ";
			string character = "" + inputEquation[i];

			//is this a number?
			bool isNumber = float.TryParse(character, out float result);
			if (isNumber)
			{
				curNum += character;
			}
			else
			{
				//is this an operator?
				switch (character)
				{
					case "+":
						{
							break;
						}
					case "-":
						{
							break;
						}
					case "*":
						{
							break;
						}
					case "/":
						{
							break;
						}
					default:
						{
							unknownChar = character;
							error = true;
							break;
						}
				}
			}

			if (error)
			{
				response_user = "Error: unknown character \"" + unknownChar + "\"";
				break;
			}
		}

		if (!error && inputEquation != "")
		{
			response_user = "Success " + random.Next();
		}
		// await JS.InvokeVoidAsync("console.log", "outstring: " + outstring);

		//reset the input text field
		inputEquation = "";
	}

	public async Task onclickrandom()
	{
		Random random = new Random();
		string[] operations = ["add","subtract","multiply","divide","exp","nthroot"];

		//what are we requesting from the api?
		OperationRequest request_obj = new OperationRequest {
			request_id = request_id,
			rootOperation = new Operation
			{
				operation_id = operations[random.Next(0, 4)],
				values = [random.Next(1, 9), random.Next(1, 9)],
				children = []
			}
		};

		await PostRequest(request_obj);
	}

	public string SerializeToXml<T>(T obj)
	{
		var xmlSerializer = new XmlSerializer(typeof(T));
		using (var stringWriter = new StringWriter())
		{
			xmlSerializer.Serialize(stringWriter, obj);
			return stringWriter.ToString();
		}
	}

	public async Task PostRequest(OperationRequest request_obj)
	{
		request_id++;

		StringContent request_content;
		string endpoint_url = sharedClient.BaseAddress + "calculator/";
		if (isXml)
		{
			var xml = SerializeToXml(request_obj);
			await JS.InvokeVoidAsync("console.log", "xml request: " + xml);

			request_content = new StringContent(xml, System.Text.Encoding.Unicode, "application/xml");
		}
		else
		{
			var json = System.Text.Json.JsonSerializer.Serialize(request_obj);
			await JS.InvokeVoidAsync("console.log", "json request: " + json);

			request_content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
		}

		HttpResponseMessage response = await sharedClient.PostAsync(endpoint_url, request_content);

		if (response.IsSuccessStatusCode)
		{
			string body = await response.Content.ReadAsStringAsync();
			await JS.InvokeVoidAsync("console.log", "response: " + body);
			response_random = body;

			//force blazor to re-render the client so it doesnt lag behind in responses
			StateHasChanged();
		}
		else
		{
			await JS.InvokeVoidAsync("console.error", response);
		}
	}
}
