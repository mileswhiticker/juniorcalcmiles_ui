@page "/weather"
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IJSRuntime JS

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<br />
<button class="btn btn-primary" @onclick="onclickweatherforecast">Fetch weather forecast from API</button>

<p role="status"><em>Current request ID:</em> @request_id</p>
<p role="status"><em>Current forecast:</em></p>
<p>@forecast_response</p>

@code {

	private int request_id = 0;
	private string forecast_response = "NA";

    private static HttpClient sharedClient = new()
    {
        //BaseAddress = new Uri("http://13.236.88.18/calcserve/"),
        BaseAddress = new Uri("http://localhost:5086/"),
    };

    public async void onclickweatherforecast()
    {
        await JS.InvokeVoidAsync("console.log", "onclickweatherforecast()");
        request_id++;

        HttpResponseMessage response = await sharedClient.GetAsync(sharedClient.BaseAddress + "weatherforecast/");

        if (response.IsSuccessStatusCode)
        {
            forecast_response = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("console.log", forecast_response);

            //force blazor to re-render the client so it doesnt lag behind in responses
            StateHasChanged();
        }
        else
        {
            await JS.InvokeVoidAsync("console.error", response);
        }
    }

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]
        }).ToArray();
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
